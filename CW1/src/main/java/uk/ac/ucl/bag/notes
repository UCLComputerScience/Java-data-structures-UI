private static class Node<E>
    {
        public E value;
        public int occurrences;
        public Node<E> next;
        public Node(E value, int occurrences, Node<E> next)
        {
            this.value = value;
            this.occurrences = occurrences;
            this.next = next;
        }
    }

    private int maxSize;
    private Node<T> head;

    public LinkedListBag() throws BagException
    {
        this(MAX_SIZE);
    }

    public LinkedListBag(int maxSize) throws BagException
    {
        if (maxSize > MAX_SIZE)
        {
            throw new BagException("Attempting to create a Bag with size greater than maximum");
        }
        if (maxSize < 1)
        {
            throw new BagException("Attempting to create a Bag with size less than 1");
        }
        this.maxSize = maxSize;
        this.head = null;
    }

    @Override
    public void add(T value) throws BagException{
    if(size()<MAX_SIZE) {
        if (!contains(value)) {
            if (head == null)
            {
                head = new Node<>(value,1,null);
            }

            else
            {
                Node<T> tmpNode = head;
                while (tmpNode.next != null)
                {
                    tmpNode = tmpNode.next;
                }
                tmpNode.next = new Node<>(value,1,null);
            }
        }
        else {
            Node<T> tmpNode = head;
        		while(tmpNode.next != null && !tmpNode.value.equals(value)){
            tmpNode = tmpNode.next;
        }
        Node<T> nextNode = tmpNode.next;
        tmpNode = new Node<>(value,++tmpNode.occurrences,nextNode);
        }
    }
        else {
        throw new BagException("Bag is full");
    }
}

    @Override
    public void addWithOccurrences(T value, int occurrences) throws BagException {
				for(int i = 0; i < occurrences; i ++){
          add(value);
        }

    @Override
    public boolean contains(T value) {
        Node<T> tmpNode = head;
        while(tmpNode!=null){
            if (tmpNode.value.equals(value)){
                return true;
            }
            tmpNode = tmpNode.next;
        }return false;
    }

    @Override
    public int countOf(T value) {
        Node<T> tmpNode = head;
        while (!tmpNode.value.equals(value)) {
            tmpNode = tmpNode.next;
            if (tmpNode.value.equals(value)) return tmpNode.occurrences;
        }return 0;
    }

    @Override
    public void remove(T value) {
        Node<T> curcontents = contents;
        Node<T> prevcontents = null;
        while(curcontents!=null && !curcontents.value.equals(value)){
            prevcontents = curcontents;
            curcontents = curcontents.next;
        }
        if(curcontents.occurrences > 1){
            --curcontents.occurrences;
        }
        else if(curcontents == null){
            throw new RuntimeException("Node not present!");
        }
        else{
            prevcontents.next = curcontents.next;
        }
    }

    @Override
    public int size() {
        int x =0;
        Node<T> tmpNode = head;
        while (tmpNode!=null){
            tmpNode = tmpNode.next;
            ++x;
        }return x;
    }

    @Override
    public boolean isEmpty() {
        return (head == null);
    }


    private class LinkedListUniqueIterator implements Iterator<T> {
        Node<T> tmpNode;
        public LinkedListUniqueIterator(){ tmpNode = head; }

        public boolean hasNext() {
            return (tmpNode != null);
        }

        public T next() {
            if (hasNext()) {
                T cValue = tmpNode.value;
                tmpNode = tmpNode.next;
                return cValue;
            }
            throw new NoSuchElementException("No more elements left in the List");
        }
    }

    private class LinkedListIterator implements Iterator<T> {
        private int count = 0;
        private int countOccur = 1;

        Node<T> tmpNode = head;
        int cOccurrences;

        public boolean hasNext() {
            int x = tmpNode.occurrences;
            if (tmpNode.next != null && x > 0){
                return true;
            }
            else if (tmpNode.next == null){
                while(x > countOccur){
                    ++countOccur;
                    return true;
                }
                return false;
            }
            return false;
        }

        public T next() {
            cOccurrences = tmpNode.occurrences;
            if (cOccurrences > count) {
                count++;
                T cValue = tmpNode.value;
                return cValue;
            }
            else {
                count = 1;
                tmpNode = tmpNode.next;
                T cValue = tmpNode.value;
                return cValue;
            }
        }
    }

    @Override
    public Iterator<T> allOccurrencesIterator() {
        return new LinkedListIterator();
    }

    @Override
    public Iterator<T> iterator() {
        return new LinkedListUniqueIterator();
    }







    <Danny code>

    package uk.ac.ucl.bag;

    import java.util.ArrayList;
    import java.util.Iterator;
    import java.util.NoSuchElementException;


    public class LinkedListBag<T extends Comparable> extends AbstractBag<T> {

        private int maxSize;
        private Element<T> contents;

        private static class Element<E>
        {
            // act as a node
            public E value;
            public int occurrences;
            public Element<E> next;

            public Element(E value, int occurrences, Element<E> next)
            {
                this.value = value;
                this.occurrences = occurrences;
                this.next = next;
            }
        }

        public LinkedListBag() throws BagException
        {
            this(MAX_SIZE);
        }

        public LinkedListBag(int maxSize) throws BagException{
            if (maxSize > MAX_SIZE)
            {
                throw new BagException("Attempting to create a Bag with size greater than maximum");
            }
            if (maxSize < 1)
            {
                throw new BagException("Attempting to create a Bag with size less than 1");
            }

            this.maxSize = maxSize;
            contents = null;
        }

        @Override
        public void add(T value) throws BagException {

            if (size() < maxSize){
                if (!contains(value)) {
                    if (contents == null) {
                        contents = new Element<>(value, 1, null);
                    }
                    else{
                        Element<T> nodeTraversing = contents;

                        while (nodeTraversing.next != null) {
                            nodeTraversing = nodeTraversing.next;
                        }

                        nodeTraversing.next = new Element<>(value, 1, null);
                    }
                }
                else{
                    addWhenContainsValue(value);
                }
            }
            else if (size() == maxSize && contains(value)){
                addWhenContainsValue(value);
            }
            else {
                throw new BagException("Bag is full");
            }

        }

        // Helper method for add(T value)
        private void addWhenContainsValue(T value){
            Element<T> currentNode  = contents;

            // traversing and checking: if different, move next
            while(currentNode != null && !currentNode.value.equals(value)){
                currentNode = currentNode.next;
            }

            currentNode.occurrences = currentNode.occurrences + 1;

        }

        @Override
        public void addWithOccurrences(T value, int occurrences) throws BagException {

            for (int i = 0; i < occurrences; i++){
                add(value);
            }
        }

        @Override
        public boolean contains(T value) {
            for(T check : this){
                if(check.equals(value)){
                    return true;
                }
            }
            return false;
        }

        // return the number of occurrences
        @Override
        public int countOf(T value) {
            Element<T> currentNode  = contents;

            // traversing and checking: if different, move next
            while(currentNode != null && !currentNode.value.equals(value)){
                currentNode = currentNode.next;
            }

            if(currentNode == null){
                throw new RuntimeException("No Nodes contain the value");
            }

            return currentNode.occurrences;
        }

        /*
        * remove one occurrence of the node
        * */
        @Override
        public void remove(T value) {
            Element<T> currentNode  = contents;
            Element<T> previousNode = null;

            // traversing and checking: if different, move next
            while(currentNode != null && !currentNode.value.equals(value)) {
                previousNode = currentNode;
                currentNode = currentNode.next;
            }

            if(currentNode == null){
                throw new RuntimeException("No Nodes contain the value");
            }

            if (currentNode.occurrences == 1){
                // remove the whole Node
                previousNode.next = currentNode.next;
            }
            else {
                // decrease one occurrence
                currentNode.occurrences = currentNode.occurrences - 1;
            }

        }

        /*
        * occurrences are not taken into account.
        * Therefore count for the number of nodes.
        * */
        @Override
        public int size() {
            int count = 0;
            Element<T> node = contents;

            while(node != null){
                node = node.next;
                count++;
            }
            return count;
        }

        @Override
        public boolean isEmpty() {
            if (contents == null){
                return true;
            }
            return false;
        }


        private class LinkedListUniqueIterator implements Iterator<T>{

            private Element<T> nextContents;

            public LinkedListUniqueIterator(){
                nextContents = contents;
            }

            @Override
            public boolean hasNext() {
                return nextContents != null;
            }

            @Override
            public T next() {

                if (!hasNext()){
                    throw new NoSuchElementException("End of the element!");
                }
                T nextContentsValue = nextContents.value;
                nextContents = nextContents.next;
                return nextContentsValue;
            }
        }

        @Override
        public Iterator<T> iterator() {
            return new LinkedListUniqueIterator();
        }

        private class LinkedListBagIterator implements Iterator<T>{
            private int index = 0;
            private int count = 0;


            private ArrayList<T> valueList = new ArrayList<>();
            private ArrayList<Integer> occurrenceList = new ArrayList<>();

            private void appendWhileTraverse(){
                //Element<T> nodeTraversing = contents;
                while (contents.next != null) {
                    valueList.add(contents.value);
                    occurrenceList.add(contents.occurrences);
                    contents = contents.next;
                }
    //            System.out.println("VALUELIST" + valueList);
    //            System.out.println("OCCURRENCELIST" + occurrenceList);
            }

            @Override
            public boolean hasNext() {
                appendWhileTraverse();
                if (index < size()){
                    if(count < occurrenceList.get(index)){
                        return true;
                    }
                }
                return false;
            }

            @Override
            public T next() {
                appendWhileTraverse();

                if (count < occurrenceList.get(index)){
                    T value = valueList.get(index);
                    count++;

                    if (count == occurrenceList.get(index)){
                        count = 0;
                        index++;
                    }
                    return value;
                }
                else{
                    throw new IllegalStateException();
                }

            }
        }

        @Override
        public Iterator<T> allOccurrencesIterator() {
            return new LinkedListBagIterator();
        }

    }
