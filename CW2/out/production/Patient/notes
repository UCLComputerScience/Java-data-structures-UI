
            "C:/Users/Lian/Desktop/cw2Data/patients100.csv"


            public void createButtonsMenu()
            {
                JMenuBar menuBar = new JMenuBar();
                JMenu menu1 = new JMenu("Files");
                JMenu menu2 = new JMenu("Mathematics");
                JMenu menu3 = new JMenu("Get Information");
                menuBar.add(menu1);
                menuBar.add(menu2);
                menuBar.add(menu3);
                JMenuItem loadItem = new JMenuItem("Load CSV");
                JMenuItem menu1Item2 = new JMenuItem("Load JSON");
                JMenuItem menu1Item3 = new JMenuItem("Save JSON");
                menu1.add(loadItem);
                menu1.add(menu1Item2);
                menu1.add(menu1Item3);
                JMenuItem menu2Item1 = new JMenuItem("Average age");
                JMenuItem menu2Item2 = new JMenuItem("Average Birth Year");
                JMenuItem menu2Item3 = new JMenuItem("Age Distribution");
                menu2.add(menu2Item1);
                menu2.add(menu2Item2);
                menu2.add(menu2Item3);
                JMenuItem menu3Item1 = new JMenuItem("Patient Names");
                JMenuItem menu3Item2 = new JMenuItem("Patient IDs");
                JMenuItem menu3Item3 = new JMenuItem("Patients Information");
                menu3.add(menu3Item1);
                menu3.add(menu3Item2);
                menu3.add(menu3Item3);
                frame.getContentPane().add(menuBar,BorderLayout.NORTH);
            }




            public String getAllIDs() {
                    StringBuilder stringBuild = new StringBuilder();
                    stringBuild.append("{\n");
                    stringBuild.append("\t" + "\"" + "patients IDs" + "\"" + ": [\n");
                    for (int i = 0; i < str.size(); i++) {
                        Object patientReference = str.get(i);
                        String patientID = ((Patient) patientReference).getID();
                        patientListID.add(patientID);
                        for (int x = 0; x < patientListID.size(); x++) {
                            stringBuild.append("\t\t" + patientListID.get(x));
                            stringBuild.append("\n");
                        }
                    }
                    stringBuild.append("\t ]");
                    String output = stringBuild.toString();
                    return output;
                }


---------------------------------------------------------------------------------------------------------------------


public class GUI {

    JFrame frame = new JFrame("Patient Viewer");
    String pathFile = "empty";
    JButton go = new JButton("Go");
    JTextField searchTextField = new JTextField(20);
    String searchedText;
    JMenuBar menuBar = new JMenuBar();
    JTextArea textArea = new JTextArea();
    JScrollPane scroll = new JScrollPane(textArea);
    Model model = new Model();
    JButton[] buttons;


    public void panelContainer()
    {
        frame.setDefaultCloseOperation(frame.EXIT_ON_CLOSE);
        frame.setSize(500,500);
        getInformationMenu();
        fileChoose();
        textArea.setEditable(false);
        scroll.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        frame.getContentPane().add(menuBar,BorderLayout.NORTH);
        frame.getContentPane().add(scroll,BorderLayout.CENTER);
        JPanel searchBar = new JPanel();
        JLabel searchLabel = new JLabel("Search :");
        searchBar.add(searchLabel);
        searchBar.add(searchTextField);
        searchBar.add(go);
        frame.getContentPane().add(searchBar,BorderLayout.SOUTH);
        frame.setVisible(true);
    }

    public void getInformationMenu()
    {
        JMenu menu3 = new JMenu("Get Information");
        JMenuItem menu3Item1 = new JMenuItem("Patient Names");
        JMenuItem menu3Item2 = new JMenuItem("Patient IDs");
        JMenuItem menu3Item3 = new JMenuItem("Patients Information");
        menu3.add(menu3Item1);
        menu3.add(menu3Item2);
        menu3.add(menu3Item3);
        menuBar.add(menu3);

        menu3Item1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {

                    model.readFile(pathFile);
                    String output = model.getAllNames();
                    textArea.setText(output);
                }
                catch (FileNotFoundException exception){
                    JOptionPane.showMessageDialog(menu3Item1,"No Input File!");
                }
            }
        });

        menu3Item3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {

                    model.readFile(pathFile);
                    String output = model.getAllPatient();
                    textArea.setText(output);

                }
                catch (FileNotFoundException exception){
                    JOptionPane.showMessageDialog(menu3Item1,"No Input File!");
                }
            }
        });

        menu3Item2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    JPanel inputIDPanel = new JPanel();
                    BoxLayout boxlayout = new BoxLayout(inputIDPanel, BoxLayout.Y_AXIS);
                    model.readFile(pathFile);
                    List<String> output = model.getAllIDs();
                    buttons = new JButton[output.size()];
                    inputIDPanel.setLayout(boxlayout);
                    for(int i = 0; i < output.size(); i++)
                    {
                        buttons[i] = new JButton(output.get(i));
                        inputIDPanel.add(buttons[i]);
                    }
                    frame.getContentPane().add(inputIDPanel);
                    frame.setVisible(true);
                }
                catch (FileNotFoundException exception){
                    JOptionPane.showMessageDialog(menu3Item1,"File not Found!");
                }
            }
        });





    }

    public void createSearchBar()
    {




        go.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textArea.setText("You searched for: " + searchTextField.getText());
                searchedText = searchTextField.getText();
            }
        });
    }

    public void fileChoose()
    {
        JMenu menu1 = new JMenu("Files");
        JMenuItem loadItem = new JMenuItem("Load");
        loadItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try{
                    JFileChooser fileChooser = new JFileChooser();
                    fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
                    int result = fileChooser.showOpenDialog(loadItem);
                    if (result == JFileChooser.APPROVE_OPTION) {
                        File selectedFile = fileChooser.getSelectedFile();
                        pathFile = selectedFile.getAbsolutePath();
                        model.readFile(pathFile);
                        textArea.setText("Selected file path: " + pathFile);
                    }
                }
                catch(FileNotFoundException exception){
                        JOptionPane.showMessageDialog(loadItem,"File not Found!");
                    }
                }
            });
        JMenuItem menu1Item3 = new JMenuItem("Save");
        menu1.add(loadItem);
        menu1.add(menu1Item3);
        menuBar.add(menu1);
    }

    public void listenInputs()
    {
        JMenu menu2 = new JMenu("Mathematics");
        JMenuItem menu2Item1 = new JMenuItem("Average age");
        JMenuItem menu2Item2 = new JMenuItem("Average Birth Year");
        JMenuItem menu2Item3 = new JMenuItem("Age Distribution");
        menu2.add(menu2Item1);
        menu2.add(menu2Item2);
        menu2.add(menu2Item3);
        menuBar.add(menu2);
    }


}


StringBuilder stringBuild = new StringBuilder();
        stringBuild.append("{\n");
        stringBuild.append("\t" + "\"" + "patients Full Names" + "\"" + ": [\n");
        for (int i = 0; i < str.size(); i++) {
            Object patientReference = str.get(i);
            String patientFirstName = ((Patient) patientReference).getFirst();
            String patientLastName = ((Patient) patientReference).getLast();
            String fullName = patientFirstName + " " + patientLastName;
            patientFullNames.add(fullName);
            for (int x = 0; x < patientFullNames.size(); x++) {
                stringBuild.append("\t\t" + patientFullNames.get(x));
                stringBuild.append("\n");
            }












            List<String> patientId = model.getAllIDs();
                            List<String> patientNames = model.getAllNames();
                            Object[][] data = new Object[patientId.size()][2];
                            for(int i = 0; i < patientId.size(); i++)   {
                                data[i][0] = patientId.get(i);
                                data[i][1] = patientNames.get(i);
                            }










                            infoList.addMouseListener(new MouseAdapter() {
                                                    @Override
                                                    public void mouseClicked(MouseEvent e) {
                                                        JList list = (JList) e.getSource();
                                                        if(e.getClickCount() == 2){
                                                            int index = list.locationToIndex(e.getPoint());
                                                            JOptionPane.showMessageDialog(frame,model.getSinglePatient(index));
                                                        }
                                                    }
                                                });













                                                import javax.swing.*;
                                                import javax.swing.event.DocumentEvent;
                                                import javax.swing.event.DocumentListener;
                                                import java.awt.*;
                                                import java.awt.event.ActionEvent;
                                                import java.awt.event.ActionListener;
                                                import java.io.File;
                                                import java.io.FileNotFoundException;
                                                import java.io.FileWriter;
                                                import java.util.List;

                                                public class GUI {
                                                    private JList<String> infoList = createJList();
                                                    JTextArea textArea = new JTextArea();
                                                    JFileChooser fileChooser = new JFileChooser();
                                                    JFrame frame = new JFrame("Patient Viewer");
                                                    String pathFile = null;
                                                    JMenuBar menuBar = new JMenuBar();
                                                    Model model = new Model();
                                                    List<String> tmpStr = model.getAllNames();



                                                    public void panelContainer()
                                                    {
                                                        frame.setDefaultCloseOperation(frame.EXIT_ON_CLOSE);
                                                        frame.setSize(500,500);
                                                        frame.getContentPane().add(menuBar,BorderLayout.NORTH);
                                                        fileLoadAndSave();
                                                        getInformationMenu();
                                                        MathematicsBar();
                                                        frame.setVisible(true);
                                                    }

                                                    public void fileLoadAndSave()
                                                    {
                                                        JMenu menu = new JMenu("Files");
                                                        JMenuItem loadItem = new JMenuItem("Load");
                                                        JMenuItem saveItem = new JMenuItem("Save");
                                                        loadItem.addActionListener(new ActionListener() {
                                                            @Override
                                                            public void actionPerformed(ActionEvent e) {
                                                                try{
                                                                    if (pathFile != null){
                                                                        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
                                                                        int result = fileChooser.showOpenDialog(loadItem);
                                                                        if (result == JFileChooser.APPROVE_OPTION) {
                                                                            File selectedFile = fileChooser.getSelectedFile();
                                                                            pathFile = selectedFile.getAbsolutePath();
                                                                            model.readFile(pathFile);
                                                                            JOptionPane.showMessageDialog(frame, "File Changed To: " + pathFile);
                                                                        }
                                                                    }
                                                                    else {
                                                                        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
                                                                        int results = fileChooser.showOpenDialog(loadItem);
                                                                        if(results == JFileChooser.APPROVE_OPTION){
                                                                            pathFile = fileChooser.getSelectedFile().getAbsolutePath();
                                                                            model.readFile(pathFile);
                                                                            JOptionPane.showMessageDialog(frame, "File Selected: " + pathFile);
                                                                        }
                                                                    }
                                                                }
                                                                catch(FileNotFoundException exception){
                                                                    JOptionPane.showMessageDialog(loadItem,"File not Found!");
                                                                }
                                                            }
                                                        });
                                                        saveItem.addActionListener(new ActionListener() {
                                                            @Override
                                                            public void actionPerformed(ActionEvent e) {
                                                                try{
                                                                    String saveTextArea = textArea.getText();
                                                                    FileWriter fWriter = new FileWriter(fileChooser.getSelectedFile() + ".json");
                                                                    fWriter.write(saveTextArea);
                                                                }
                                                                catch (Exception exception){
                                                                    JOptionPane.showMessageDialog(saveItem,"Could not save item!");
                                                                }
                                                            }
                                                        });
                                                        menu.add(loadItem);
                                                        menu.add(saveItem);
                                                        menuBar.add(menu);
                                                    }

                                                    public JPanel searchBar()
                                                    {
                                                        JTextField searchTextField = new JTextField(20);
                                                        searchTextField.getDocument().addDocumentListener(new DocumentListener() {
                                                            @Override
                                                            public void insertUpdate(DocumentEvent e) {
                                                                filter();
                                                            }
                                                            @Override
                                                            public void removeUpdate(DocumentEvent e) {
                                                                filter();
                                                            }
                                                            @Override
                                                            public void changedUpdate(DocumentEvent e) { }
                                                            private void filter()   {
                                                                String filter = searchTextField.getText();
                                                                filterJList((DefaultListModel<String>)infoList.getModel(), filter);
                                                            }
                                                        });
                                                        JPanel searchBar = new JPanel();
                                                        JLabel searchLabel = new JLabel("Search :");
                                                        searchBar.add(searchLabel);
                                                        searchBar.add(searchTextField);
                                                        return searchBar;
                                                    }

                                                    public void filterJList(DefaultListModel<String> inputJlist, String filter) {
                                                        for (String curStr : tmpStr){
                                                            if (!curStr.startsWith(filter)){
                                                                if(inputJlist.contains(curStr)){
                                                                    inputJlist.addElement(curStr);
                                                                }
                                                            }
                                                            else    {
                                                                if(!inputJlist.contains(curStr)){
                                                                    inputJlist.addElement(curStr);
                                                                }
                                                            }
                                                        }
                                                    }

                                                    private JList createJList() {
                                                        JList list = new JList(initialList());
                                                        list.setVisibleRowCount(100);
                                                        return list;
                                                    }

                                                    public ListModel<String> initialList(){
                                                        DefaultListModel<String> initialList = new DefaultListModel<>();
                                                        for (String curStr : tmpStr){
                                                            initialList.addElement(curStr);
                                                        }
                                                        return initialList;
                                                    }

                                                    public void getInformationMenu()
                                                    {
                                                        JMenu menu = new JMenu("Get Information");
                                                        JMenuItem getPatientIdList = new JMenuItem("Patients' IDs");
                                                        getPatientIdList.addActionListener(new ActionListener() {
                                                            @Override
                                                            public void actionPerformed(ActionEvent e) {
                                                                try{
                                                                    frame.add(new JScrollPane(infoList));
                                                                    frame.add(searchBar(), BorderLayout.SOUTH);
                                                                    frame.setVisible(true);
                                                                }
                                                                catch (Exception e1){
                                                                    JOptionPane.showMessageDialog(frame,"No Entries");
                                                                }

                                                            }
                                                        });
                                                        menu.add(getPatientIdList);
                                                        menuBar.add(menu);
                                                    }

                                                    public void MathematicsBar()
                                                    {
                                                        JMenu Mathematics = new JMenu("Statistics");
                                                        JMenuItem Age = new JMenuItem("Avg. Age");
                                                        JMenuItem BirthYear = new JMenuItem("Avg. Birth Year");
                                                        JMenuItem AgeDistribution = new JMenuItem("Age Distribution");
                                                        Age.addActionListener(new ActionListener() {
                                                            @Override
                                                            public void actionPerformed(ActionEvent e) {
                                                                try {
                                                                    int avgAge = model.getAverageAge();
                                                                    JOptionPane.showMessageDialog(frame, "The Average Age is: " + avgAge);
                                                                }
                                                                catch (Exception exception){
                                                                    JOptionPane.showMessageDialog(frame, "No Entries");
                                                                }
                                                            }
                                                        });
                                                        BirthYear.addActionListener(new ActionListener() {
                                                            @Override
                                                            public void actionPerformed(ActionEvent e) {
                                                                try {
                                                                    int birthYear = model.getAverageBirthYear();
                                                                    JOptionPane.showMessageDialog(frame, "The Birth Year is: " + birthYear);
                                                                }
                                                                catch (Exception exception)
                                                                {
                                                                    JOptionPane.showMessageDialog(frame, "No entries");
                                                                }
                                                            }
                                                        });
                                                        AgeDistribution.addActionListener(new ActionListener() {
                                                            @Override
                                                            public void actionPerformed(ActionEvent e) {
                                                                try {
                                                                    float ageDistribution = model.getAgeDistribution();
                                                                    JOptionPane.showMessageDialog(frame, "The Age Distribution is: " + ageDistribution);
                                                                }
                                                                catch (Exception exception)
                                                                {
                                                                    JOptionPane.showMessageDialog(frame, "No Entries" );
                                                                }
                                                            }
                                                        });
                                                        Mathematics.add(Age);
                                                        Mathematics.add(BirthYear);
                                                        Mathematics.add(AgeDistribution);
                                                        menuBar.add(Mathematics);
                                                    }




                                                }